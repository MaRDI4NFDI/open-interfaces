---
name: build and test

on: [push, pull_request]

jobs:
    matrix-setup:
        runs-on: ubuntu-22.04
        steps:
            - name: Setup matrix combinations
              id: setup-matrix-combinations
              run: |
                  MATRIX_PARAMS_COMBINATIONS='
                      {"CC": "clang", "CXX": "clang++"},
                      {"CC": "gcc", "CXX": "g++"},
                  '
                  echo ::set-output name=matrix-combinations::{\"include\":[$MATRIX_PARAMS_COMBINATIONS]}
        outputs:
            matrix-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-combinations }}

    metadata:
        runs-on: ubuntu-22.04
        needs: matrix-setup
        steps:
            - uses: actions/checkout@v3
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ghcr.io/mardi4nfdi/open-interfaces/ci_test
                  flavor: |
                      latest=false
                  tags: |
                      type=sha,suffix=-g{{branch}}
        outputs:
            tags: ${{steps.meta.outputs.tags}}
    build:
        runs-on: ubuntu-22.04
        needs: [metadata, matrix-setup]
        strategy:
            matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix-combinations) }}
        steps:
            - uses: actions/checkout@v3
            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Build
              uses: docker/build-push-action@v3
              with:
                  context: .
                  push: true
                  tags: ${{ needs.metadata.outputs.tags }}_${{matrix.CC}}
                  build-args: |
                      M2_CC=${{matrix.CC}}
                      M2_CXX=${{matrix.CXX}}
    test:
        runs-on: ubuntu-22.04
        needs: [metadata, matrix-setup, build]
        strategy:
            matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix-combinations) }}
        steps:
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Test
              run: |
                  docker run --rm ${{ needs.metadata.outputs.tags }}_${{matrix.CC}}
    docs:
        runs-on: ubuntu-22.04
        needs: [metadata, matrix-setup, build]
        container:
            credentials:
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
            image: ${{ needs.metadata.outputs.tags }}_gcc
        steps:
            - name: build_docs
              run: |
                  cmake -GNinja -B build -S /src
                  cmake --build build --target docs
            - name: upload
              uses: actions/upload-pages-artifact@v1
              with:
                  path: build/docs/sphinx_html/
    deploy_docs:
        if: github.repository == 'MaRDI4NFDI/open-interfaces' && github.branch == 'main'
        runs-on: ubuntu-22.04
        needs: [docs]
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        permissions:
            pages: write    # to deploy to Pages
            id-token: write # to verify the deployment originates from an appropriate source
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v1
